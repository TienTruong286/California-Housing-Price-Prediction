# -*- coding: utf-8 -*-
"""California Housing Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13DI6h9Ssg_nXyB6iCm8_wm0-LngcSQDP

## Predictive Modeling of California Housing Prices: A Comparative Analysis with XGBoost

**Project Description:**

The goal of this project is to develop a machine learning model using the XGBoost algorithm to predict housing prices based on the California housing dataset. The dataset contains various features related to houses in different locations in California, such as the average number of rooms, population density, median income, and more.

To achieve this, I will follow these steps:

**Data Exploration:** I will begin by exploring the California housing dataset to understand its structure, feature types, missing values, and statistical summaries. This step will help me gain insights into the data and make informed decisions during preprocessing and modeling.

**Data Preprocessing**: In this step, I will handle any missing values, perform feature scaling, and potentially apply feature engineering techniques to enhance the predictive power of the model. This may include handling outliers, encoding categorical variables, and normalizing numerical features.

**Train-Test Split**: I will split the dataset into training and testing subsets. The training set will be used to train the XGBoost model, while the testing set will be used to evaluate its performance and generalization.

XGBoost Model Training: **bold text** Using the XGBoost library, I will train a regression model on the training data. XGBoost is a powerful gradient boosting algorithm that excels in handling complex relationships and capturing non-linear patterns in the data. I will tune the hyperparameters of the model to optimize its performance.

Model Evaluation: I will evaluate the trained XGBoost model using appropriate evaluation metrics for regression, such as mean squared error (MSE), mean absolute error (MAE), and R-squared. These metrics will provide insights into how well the model predicts the housing prices.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor

from sklearn.datasets import fetch_california_housing

housing = fetch_california_housing()
data = housing.data
target = housing.target

"""The California housing dataset provides information about housing prices and various features associated with houses in different locations across California.

The dataset consists of a set of input features, or independent variables, and a corresponding target variable, or dependent variable, which represents the median house value in a particular area. The goal is to build a predictive model that can estimate the median house value based on the given features.

The features present in the dataset include:

1.   MedInc: Median income of the block.
2.   HouseAge: Median age of the houses in the block.
3.   AveRooms: Average number of rooms per dwelling.
4.AveBedrms: Average number of bedrooms per dwelling.
5.Population: Total population in the block.
6.AveOccup: Average number of occupants per dwelling.
7.Latitude: Latitude coordinate of the block.
8.Longitude: Longitude coordinate of the block.




"""

df = pd.DataFrame(data, columns=housing.feature_names)
df['Target'] = target

# Print the DataFrame
df.head()

df = df.rename(columns={"Target": "Price"})

df.head()

df.shape

df.isnull().sum()

plt.figure(figsize = (10,10))
sns.heatmap(df.corr(), annot = True, cmap = "Blues")

X = df.drop("Price", axis = 1).values
y = df["Price"].values

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.25)

X_train.shape

X_test.shape

model = XGBRegressor()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

from sklearn.metrics import mean_squared_error,mean_absolute_error
np.sqrt(mean_squared_error(y_pred, y_test))

mean_absolute_error(y_pred, y_test)

y_test.mean()